receivers:
  otlp:
    protocols:
      grpc:
      http:
  hostmetrics:
    collection_interval: 1m
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
      paging:
      process:
        mute_process_name_error: true
      processes:
  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 30s
    timeout: 10s
    api_version: 1.24
    container_labels_to_metric_labels:
      my.container.label: my-metric-label-c
      my.other.container.label: my-other-metric-label-c
    env_vars_to_metric_labels:
      MY_ENVIRONMENT_VARIABLE: my-metric-label-ev
      MY_OTHER_ENVIRONMENT_VARIABLE: my-other-metric-label-ev
  prometheus:
    config:
      global:
        scrape_interval: 30s
      scrape_configs:
        - job_name: otel-collector
          static_configs:
            - targets: ['localhost:8888']
processors:
  batch:
    send_batch_size: 30000
    timeout: 30s
  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md
  resourcedetection:
    detectors: [env, system] # include ec2 for AWS, gce for GCP and azure for Azure.
    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.
    timeout: 2s
    override: false
    system:
      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback
extensions:
  health_check: {}
  zpages: {}
exporters:
  otlp:
    endpoint: "<IP of machine hosting SigNoz>:4317"
    tls:
      insecure: true
  logging:
    logLevel: debug
service:
  extensions: [health_check, zpages]
  pipelines:
    metrics:
      receivers: [otlp, docker_stats, hostmetrics]
      processors: [resourcedetection, batch]
      exporters: [otlp]
    metrics/prometheusexporter:
      receivers: [prometheus]
      processors: [resourcedetection, batch]
      exporters: [otlp]
